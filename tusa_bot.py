import os
import json
import aiohttp
import asyncio
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –¢–æ–∫–µ–Ω –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Render
TOKEN = os.getenv("TUSA_TOKEN")
JSON_URL = "https://raw.githubusercontent.com/dimonp4ik/tusa-bot/main/participants.json"
SUBSCRIBERS_FILE = "subscribers.json"

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ï ID)
ADMINS = [671071896, 1254580347]  # –¢–≤–æ–π ID –∏ –≤—Ç–æ—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∞

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
def load_subscribers():
    try:
        with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {"subscribers": []}

def save_subscriber(user_id, username, first_name):
    data = load_subscribers()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_user = next((sub for sub in data["subscribers"] if sub["user_id"] == user_id), None)
    
    if not existing_user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        data["subscribers"].append({
            "user_id": user_id,
            "username": username,
            "first_name": first_name,
            "subscribed": True,
            "joined_date": datetime.now().isoformat(),
            "last_activity": datetime.now().isoformat()
        })
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user["subscribed"] = True
        existing_user["last_activity"] = datetime.now().isoformat()
        if username:
            existing_user["username"] = username
        if first_name:
            existing_user["first_name"] = first_name
        
    with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ GitHub
async def load_data():
    async with aiohttp.ClientSession() as session:
        async with session.get(JSON_URL) as resp:
            text = await resp.text()
            try:
                return json.loads(text)
            except json.JSONDecodeError:
                start = text.find("{")
                end = text.rfind("}") + 1
                return json.loads(text[start:end])

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="list")],
        [InlineKeyboardButton("TUSA SPORT", callback_data="sports")],
        [InlineKeyboardButton("–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏", callback_data="socials")]
        # –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" - —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞
    ]
    return InlineKeyboardMarkup(keyboard)

# –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
def admin_menu():
    keyboard = [
        [InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast")],
        [InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="stats")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ 3 –≤ —Ä—è–¥
def participants_menu(participants):
    buttons = []
    row = []
    for i, p in enumerate(participants):
        row.append(InlineKeyboardButton(p["name"], callback_data=f"participant_{p['name']}"))
        if (i + 1) % 3 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")])
    return InlineKeyboardMarkup(buttons)

# –ö–Ω–æ–ø–∫–∏ –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
def sports_menu(sports):
    buttons = []
    for sport in sports:
        buttons.append([InlineKeyboardButton(sport["name"], callback_data=f"sport_{sport['name']}")])
    buttons.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")])
    return InlineKeyboardMarkup(buttons)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    save_subscriber(user.id, user.username, user.first_name)  # –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞!
    
    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ TUSA GANG, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏, –≤—ã–±–µ—Ä–∏ –≤–Ω–∏–∑—É –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É.\n\n"
        "‚úÖ –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏!"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞ (–¥–≤–∞ ID)
    if user.id in ADMINS:
        keyboard = [
            [InlineKeyboardButton("–û–±—ã—á–Ω–æ–µ –º–µ–Ω—é", callback_data="main")],
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]
        ]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=main_menu())

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
async def broadcast_message(context: ContextTypes.DEFAULT_TYPE, message_text: str):
    subscribers = load_subscribers()
    success = 0
    failed = 0
    
    for sub in subscribers["subscribers"]:
        if sub["subscribed"]:
            try:
                await context.bot.send_message(
                    chat_id=sub["user_id"],
                    text=message_text
                )
                success += 1
                await asyncio.sleep(0.1)  # –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            except:
                failed += 1
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø–∏—Å–∞–≤—à–µ–≥–æ—Å—è –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                sub["subscribed"] = False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ø–∏—Å–∞–≤—à–∏–µ—Å—è
    if failed > 0:
        with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(subscribers, f, ensure_ascii=False, indent=2)
    
    return success, failed

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = await load_data()
    participants = data.get("participants", [])
    sports = data.get("sports", [])
    
    user = query.from_user
    
    # –ê–í–¢–û–ü–û–î–ü–ò–°–ö–ê –ø—Ä–∏ –ª—é–±–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏!
    save_subscriber(user.id, user.username, user.first_name)

    if query.data == "list":
        await query.edit_message_text(
            "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", reply_markup=participants_menu(participants)
        )
    elif query.data == "sports":
        if sports:
            await query.edit_message_text(
                "üèÜ TUSA SPORT - –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:", reply_markup=sports_menu(sports)
            )
        else:
            await query.edit_message_text(
                "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=main_menu()
            )
    elif query.data == "socials":
        socials_text = (
            "–ù–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º: https://www.instagram.com/gangtusa/following/\n"
            "–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: https://t.me/tusa_gang"
        )
        await query.edit_message_text(socials_text, reply_markup=main_menu())
    elif query.data == "admin":
        if user.id in ADMINS:
            await query.edit_message_text(
                "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", 
                reply_markup=admin_menu()
            )
    elif query.data == "broadcast":
        if user.id in ADMINS:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            context.user_data["waiting_for_broadcast"] = True
            await query.edit_message_text(
                "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:"
            )
    elif query.data == "stats":
        if user.id in ADMINS:
            subscribers = load_subscribers()
            total = len(subscribers["subscribers"])
            active = len([s for s in subscribers["subscribers"] if s["subscribed"]])
            
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n\n–í—Å–µ–≥–æ: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}"
            await query.edit_message_text(stats_text, reply_markup=admin_menu())
    elif query.data == "main":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif query.data.startswith("participant_"):
        participant_name = query.data.replace("participant_", "")
        participant = next((p for p in participants if p["name"] == participant_name), None)
        if participant:
            text = f"{participant['name']}\n{participant['bio']}"
            if participant.get("photo"):
                await context.bot.send_photo(
                    chat_id=query.message.chat.id,
                    photo=participant["photo"],
                    caption=text,
                )
            else:
                await query.message.reply_text(text)
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await context.bot.send_message(
                chat_id=query.message.chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
                reply_markup=participants_menu(participants),
            )
    elif query.data.startswith("sport_"):
        sport_name = query.data.replace("sport_", "")
        sport = next((s for s in sports if s["name"] == sport_name), None)
        if sport:
            text = f"üèÜ {sport['name']} üèÜ\n\n{sport['description']}\n\nüìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {sport['schedule']}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if sport.get("photos") and len(sport["photos"]) > 0:
                # –ü–µ—Ä–≤—É—é —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                await context.bot.send_photo(
                    chat_id=query.message.chat.id,
                    photo=sport["photos"][0],
                    caption=text,
                )
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                for photo_url in sport["photos"][1:]:
                    await context.bot.send_photo(
                        chat_id=query.message.chat.id,
                        photo=photo_url
                    )
            else:
                await query.edit_message_text(text)
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
            await context.bot.send_message(
                chat_id=query.message.chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:",
                reply_markup=sports_menu(sports),
            )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    
    # –ê–í–¢–û–ü–û–î–ü–ò–°–ö–ê –ø—Ä–∏ –ª—é–±–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!
    save_subscriber(user.id, user.username, user.first_name)
    
    if context.user_data.get("waiting_for_broadcast") and user.id in ADMINS:
        message_text = update.message.text
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        success, failed = await broadcast_message(context, message_text)
        
        context.user_data["waiting_for_broadcast"] = False
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
            reply_markup=admin_menu()
        )
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é :)", reply_markup=main_menu())

def run_bot():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    # –ó–∞–ø—É—Å–∫ polling —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    app.run_polling()

