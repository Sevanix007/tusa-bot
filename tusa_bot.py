import os
import json
import aiohttp
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

# –¢–æ–∫–µ–Ω –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Render
TOKEN = os.getenv("TUSA_TOKEN")

# –°—Å—ã–ª–∫–∞ –Ω–∞ JSON —Å –¥–∞–Ω–Ω—ã–º–∏
JSON_URL = "https://raw.githubusercontent.com/dimonp4ik/tusa-bot/main/participants.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ GitHub
async def load_data():
    async with aiohttp.ClientSession() as session:
        async with session.get(JSON_URL) as resp:
            text = await resp.text()
            try:
                return json.loads(text)
            except json.JSONDecodeError:
                start = text.find("{")
                end = text.rfind("}") + 1
                return json.loads(text[start:end])

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="list")],
        [InlineKeyboardButton("TUSA SPORT", callback_data="sports")],
        [InlineKeyboardButton("–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏", callback_data="socials")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ 3 –≤ —Ä—è–¥
def participants_menu(participants):
    buttons = []
    row = []
    for i, p in enumerate(participants):
        row.append(InlineKeyboardButton(p["name"], callback_data=f"participant_{p['name']}"))
        if (i + 1) % 3 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")])
    return InlineKeyboardMarkup(buttons)

# –ö–Ω–æ–ø–∫–∏ –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
def sports_menu(sports):
    buttons = []
    row = []
    for i, sport in enumerate(sports):
        row.append(InlineKeyboardButton(sport["name"], callback_data=f"sport_{sport['name']}"))
        if (i + 1) % 2 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")])
    return InlineKeyboardMarkup(buttons)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ TUSA GANG, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏, –≤—ã–±–µ—Ä–∏ –≤–Ω–∏–∑—É –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É."
    )
    await update.message.reply_text(text, reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = await load_data()
    participants = data.get("participants", [])
    sports = data.get("sports", [])

    if query.data == "list":
        await query.edit_message_text(
            "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", reply_markup=participants_menu(participants)
        )
    elif query.data == "sports":
        await query.edit_message_text(
            "TUSA SPORT - –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:", reply_markup=sports_menu(sports)
        )
    elif query.data == "socials":
        socials_text = (
            "–ù–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º: https://www.instagram.com/gangtusa/following/\n"
            "–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: https://t.me/tusa_gang"
        )
        await query.edit_message_text(socials_text, reply_markup=main_menu())
    elif query.data == "main":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif query.data.startswith("participant_"):
        participant_name = query.data.replace("participant_", "")
        participant = next((p for p in participants if p["name"] == participant_name), None)
        if participant:
            text = f"{participant['name']}\n{participant['bio']}"
            if participant.get("instagram"):
                text += f"\nInstagram: {participant['instagram']}"
            if participant.get("photo"):
                await context.bot.send_photo(
                    chat_id=query.message.chat.id,
                    photo=participant["photo"],
                    caption=text,
                )
            else:
                await query.message.reply_text(text)
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await context.bot.send_message(
                chat_id=query.message.chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
                reply_markup=participants_menu(participants),
            )
    elif query.data.startswith("sport_"):
        sport_name = query.data.replace("sport_", "")
        sport = next((s for s in sports if s["name"] == sport_name), None)
        if sport:
            text = f"üèÜ {sport['name']} üèÜ\n\n{sport['description']}\n\nüìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {sport['schedule']}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if sport.get("photos") and len(sport["photos"]) > 0:
                await context.bot.send_photo(
                    chat_id=query.message.chat.id,
                    photo=sport["photos"][0],
                    caption=text,
                )
            else:
                await query.edit_message_text(text)
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
            await context.bot.send_message(
                chat_id=query.message.chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:",
                reply_markup=sports_menu(sports),
            )

def run_bot():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    # –ó–∞–ø—É—Å–∫ polling —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    app.run_polling()
